import React, { useState, useEffect } from "react";
import Select from "react-select";
import Header from "./header";
import MenuLateral from "./menu-lateral";
import Footer from "./footer";
import MenuA√±adir from "./menu-a√±adir";
import { collection, addDoc, getDocs } from "firebase/firestore";
import { db } from "../credenciales";

function FormA√±adirDisponible() {
  const [formData, setFormData] = useState({
    prenda: "",
    detalles: "",
    costo: "",
    precio: "",
    talla: [],
    categoria: null,
    proveedor: null,
  });

  const [fotos, setFotos] = useState([]);
  const [previewUrls, setPreviewUrls] = useState([]);
  const [loading, setLoading] = useState(false);
  const [menuAbierto, setmenuAbierto] = useState(false);
  const [menuA√±adir, setmenuA√±adir] = useState(false);
  const [proveedores, setProveedores] = useState([]);
  const [fecha, setFecha] = useState("");

  // ‚úÖ URL DEL BACKEND
  const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || "https://malim-backend.vercel.app";

  const manejadorMenu = () => {
    setmenuAbierto(!menuAbierto);
  };

  const manejadorMenuA√±adir = () => {
    setmenuA√±adir(!menuA√±adir);
  };

  // ‚úÖ FUNCI√ìN FALTANTE AGREGADA
  const handleDate = (e) => {
    const newDate = e.target.value;
    setFecha(newDate);
  };

  const categorias = [
    "Abrigos", "Accesorios", "Patria", "Blusas", "Playeras", "Playeras deportivas", "Conjuntos",
    "Conjuntos deportivos", "Chamarras", "Sudaderas", "Maxi sudaderas", "Maxi vestidos", "Maxi cobijas", 
    "Ensambles", "Pantalones", "Pants", "Shorts", "Infantil ni√±o", "Infantil ni√±a", "Medias", "Leggins",
    "Mallones", "Ropa interior", "Sacos", "Blazers", "Capas", "Palazzos", "Camisas", "Gorros", "Calzado", 
    "Chalecos", "Blusones", "Pijamas", "Guantes", "Faldas", "Su√©teres", "Overoles", "Otros", "Sin Categoria", 
    "Ni√±os uisex", "Gabardinas", "Vestidos"
  ];

  const tallas = [
    "(Inf 2-4)", "(Inf 6-8)", "(Inf 10-12)", "(juv 14-16)", "(XS 3-5)", "(28-30)", "(30-32)", "(30-34)", 
    "(32-36)", "(32-34)", "(34-36)", "(36-38)", "(38-40)", "(40-42)", "Unitalla", "(5)", "(7)", "(9)", 
    "(11)", "(13)", "(15)", "(17)", "(4)", "(6)", "(8)", "(10)", "(12)", "(14)", "(16)", "(28)", "(30)", 
    "(32)", "(34)", "(36)", "(38)", "(40)", "(42)"
  ];

  const categoriaOptions = categorias.map((cat) => ({
    value: cat,
    label: cat,
  }));

  const tallaOptions = tallas.map((talla) => ({
    value: talla,
    label: talla,
  }));

  const proveedoresOptions = proveedores.map((prov) => ({
    value: prov.id,
    label: prov.proveedor,
  }));

  // ‚úÖ GUARDAR ARCHIVOS SIN SUBIRLOS INMEDIATAMENTE
  const handleFileChange = (e) => {
    const files = [...e.target.files];
    if (!files.length) return;

    setFotos(prev => [...prev, ...files]);
    const newPreviewUrls = files.map(file => URL.createObjectURL(file));
    setPreviewUrls(prev => [...prev, ...newPreviewUrls]);
  };

  // ‚úÖ LIMPIAR PREVIEW URLs
  useEffect(() => {
    return () => {
      previewUrls.forEach(url => URL.revokeObjectURL(url));
    };
  }, [previewUrls]);

  useEffect(() => {
    const fetchDocuments = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "proveedores"));
        const docsArray = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setProveedores(docsArray);
      } catch (error) {
        console.error("Error al cargar los proveedores", error);
      }
    };
    fetchDocuments();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleCategoriaChange = (selectedOption) => {
    setFormData({ ...formData, categoria: selectedOption });
  };

  const handleTallaChange = (selectedOptions) => {
    const selectedTallas = selectedOptions ? selectedOptions.map((option) => option.value) : [];
    setFormData({ ...formData, talla: selectedTallas });
  };

  const handleProveedorChange = (selectedOption) => {
    setFormData({ ...formData, proveedor: selectedOption });
  };

  // ‚úÖ SUBIR IM√ÅGENES SOLO AL DAR CLICK EN "AGREGAR PRENDA"
  const handleSubmit = async (e) => {
  e.preventDefault();
  setLoading(true);

  try {
    let uploadedUrls = [];

    // ‚úÖ 1. SUBIR IM√ÅGENES CON DEBUG POR ALERTS
    if (fotos.length > 0) {
      try {
        alert("üì§ Iniciando subida de " + fotos.length + " im√°genes...");
        
        const uploadFormData = new FormData();
        fotos.forEach((file, index) => {
          const fileName = `malim-${Date.now()}-${index}-${file.name.replace(/[^a-zA-Z0-9.-]/g, '_')}`;
          uploadFormData.append("files", file, fileName);
        });

        // ‚úÖ Agregar timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
          controller.abort();
          alert("‚è∞ Timeout: La subida est√° tardando demasiado");
        }, 30000);

        const response = await fetch(BACKEND_URL + "/api/upload", {
          method: "POST",
          body: uploadFormData,
          mode: 'cors',
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        // ‚úÖ MOSTRAR ESTADO DE LA RESPUESTA
        alert("üì® Respuesta recibida. Status: " + response.status);
        
        if (!response.ok) {
          const errorText = await response.text();
          alert("‚ùå Error del servidor: " + response.status + "\n" + errorText);
          throw new Error(`Error ${response.status}: ${errorText}`);
        }

        // ‚úÖ VER RESPUESTA COMO TEXTO
        const responseText = await response.text();
        alert("üìù Respuesta del servidor:\n" + responseText.substring(0, 200) + "...");

        // ‚úÖ INTENTAR PARSEAR JSON
        let data;
        try {
          data = JSON.parse(responseText);
          alert("‚úÖ JSON parseado correctamente");
        } catch (parseError) {
          alert("‚ùå La respuesta no es JSON v√°lido");
          throw new Error("Respuesta no es JSON: " + responseText.substring(0, 100));
        }

        // ‚úÖ VERIFICAR SI TIENE URLs
        if (data && data.urls && Array.isArray(data.urls)) {
          uploadedUrls = data.urls;
          alert("üéâ " + uploadedUrls.length + " URLs obtenidas:\n" + uploadedUrls.join("\n"));
        } else {
          alert("‚ö†Ô∏è El servidor no devolvi√≥ URLs. Respuesta completa:\n" + JSON.stringify(data));
        }

      } catch (uploadError) {
        alert("‚ùå Error subiendo im√°genes: " + uploadError.message);
        // Continuar sin im√°genes
      }
    } else {
      alert("‚ÑπÔ∏è No hay im√°genes para subir");
    }

    // ‚úÖ 2. PREPARAR DATOS PARA FIRESTORE
    alert("üíæ Preparando datos para Firestore...");
    const dataToSubmit = {
      prenda: formData.prenda,
      detalles: formData.detalles,
      costo: Number(formData.costo),
      precio: Number(formData.precio),
      talla: formData.talla,
      categoria: formData.categoria ? formData.categoria.value : "",
      proveedor: formData.proveedor ? formData.proveedor.label : "",
      fotos: uploadedUrls,
      fecha: fecha || new Date().toISOString().split('T')[0],
      fechaCreacion: new Date()
    };

    alert("üì¶ Datos a guardar:\n" + JSON.stringify({
      prenda: dataToSubmit.prenda,
      costo: dataToSubmit.costo,
      fotos_count: dataToSubmit.fotos.length
    }, null, 2));

    // ‚úÖ 3. GUARDAR EN FIRESTORE
    alert("üî• Guardando en Firestore...");
    const docRef = await addDoc(collection(db, "disponible"), dataToSubmit);
    alert("‚úÖ ¬°√âxito! Documento guardado con ID: " + docRef.id);

    // ‚úÖ 4. RESETEAR FORMULARIO
    setFormData({ prenda: "", detalles: "", costo: "", precio: "", talla: [], categoria: null, proveedor: null });
    setFotos([]);
    setPreviewUrls([]);
    setFecha("");

    alert("üéâ ¬°Prenda agregada completamente!");

  } catch (error) {
    alert("üí• Error cr√≠tico: " + error.message);
  } finally {
    setLoading(false);
  }
};

  // ‚úÖ ELIMINAR IMAGEN DE LA PREVISUALIZACI√ìN
  const removeImage = (index) => {
    const newFotos = [...fotos];
    const newPreviewUrls = [...previewUrls];
    URL.revokeObjectURL(newPreviewUrls[index]);
    newFotos.splice(index, 1);
    newPreviewUrls.splice(index, 1);
    setFotos(newFotos);
    setPreviewUrls(newPreviewUrls);
  };

  // Agrega esta funci√≥n para probar la conexi√≥n
const testBackendConnection = async () => {
  try {
    alert("üîå Probando conexi√≥n con el backend...");
    const response = await fetch(BACKEND_URL + "/api/health", {
      method: "GET",
      mode: "cors"
    });

    const text = await response.text();
    alert("üì° Respuesta de /health:\nStatus: " + response.status + "\n" + text);

  } catch (error) {
    alert("‚ùå Error de conexi√≥n: " + error.message);
  }
};


  return (
    <div className="bg-pink-100 min-h-screen">
      <header className="relative">
        <Header menuAbierto={menuAbierto} manejadorMenu={manejadorMenu} />
        <h1 className="fixed inset-x-0 transform pt-2 text-center pointer-events-none text-xl font-bold text-white z-50">
          A√±adir prenda disponible
        </h1>
      </header>

      <div>
        <MenuLateral menuAbierto={menuAbierto} />
      </div>

      <div>
        <MenuA√±adir menuA√±adir={menuA√±adir} />
      </div>

      {/* PREVISUALIZACI√ìN DE IM√ÅGENES */}
      <div className="flex flex-wrap gap-2 mt-2 p-4">
        {previewUrls.map((url, i) => (
          <div key={i} className="relative">
            <img
              src={url}
              alt={`preview-${i}`}
              className="w-24 h-24 object-cover rounded-md shadow"
            />
            <button
              type="button"
              onClick={() => removeImage(i)}
              className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm"
            >
              √ó
            </button>
          </div>
        ))}
      </div>

      <div className="flex flex-center justify-center pt-10 pb-20">
        <form
          onSubmit={handleSubmit}
          className="lg:border-2 lg:shadow-xl px-5 lg:py-2 pb-20 rounded-lg border-pink-200 mt-10 max-w-lg w-full"
        >
          <div className="flex flex-col justify-center">
            <input
              type="file"
              id="file"
              multiple
              onChange={handleFileChange}
              className="absolute opacity-0 w-0 h-0"
              accept="image/*"
            />
            <label
              htmlFor="file"
              className="mt-2 inline-block py-2 px-4 bg-pink-400 text-center text-white rounded-md cursor-pointer hover:bg-pink-200"
            >
              üì∏ Elegir im√°genes
            </label>
            {fotos.length > 0 && (
              <p className="text-sm text-gray-600 mt-1">
                {fotos.length} imagen(es) seleccionada(s)
              </p>
            )}
          </div>

          <div className="flex flex-col pt-2">
            <label className="px-2 text-pink-800 font-bold" htmlFor="datePicker">
              Fecha
            </label>
            <input
              className="w-full px-2 h-8 bg-white rounded-md shadow-sm"
              type="date"
              id="datePicker"
              value={fecha}
              onChange={handleDate} /* ‚úÖ CORREGIDO */
              required
            />
          </div>

          <div className="flex flex-col pt-4">
            <label className="px-2 text-pink-800 font-bold">Prenda:</label>
            <input
              type="text"
              name="prenda"
              placeholder="Escribe qu√© prenda es"
              value={formData.prenda}
              onChange={handleChange}
              required
              className="px-2 rounded-md h-8 shadow-sm"
            />
          </div>

          <div className="flex flex-col pt-2">
            <label className="px-2 text-pink-800 font-bold">Costo:</label>
            <input
              type="number"
              name="costo"
              placeholder="Costo del proveedor"
              value={formData.costo}
              onChange={handleChange}
              required
              className="px-2 rounded-md h-8 shadow-sm"
            />
          </div>

          <div className="flex flex-col pt-2">
            <label className="px-2 text-pink-800 font-bold">Precio:</label>
            <input
              type="number"
              name="precio"
              placeholder="Precio p√∫blico"
              value={formData.precio}
              onChange={handleChange}
              required
              className="px-2 rounded-md h-8 shadow-sm"
            />
          </div>

          <div className="flex flex-col pt-2">
            <label className="px-2 text-pink-800 font-bold">Talla:</label>
            <Select
              options={tallaOptions}
              value={formData.talla.map((talla) => ({ value: talla, label: talla }))}
              onChange={handleTallaChange}
              isMulti
              placeholder="Seleccionar tallas"
            />
          </div>

          <div className="flex flex-col pt-2">
            <label className="px-2 text-pink-800 font-bold">Categor√≠a:</label>
            <Select
              options={categoriaOptions}
              value={formData.categoria}
              onChange={handleCategoriaChange}
              isClearable
              placeholder="Seleccionar categor√≠a"
            />
          </div>

          <div className="flex flex-col pt-2">
            <label className="px-2 text-pink-800 font-bold">Proveedor:</label>
            <Select
              options={proveedoresOptions}
              value={formData.proveedor}
              onChange={handleProveedorChange}
              isClearable
              placeholder="Seleccionar proveedor"
            />
          </div>

          <div className="flex flex-col pt-2">
            <label className="px-2 text-pink-800 font-bold">Detalles:</label>
            <input
              type="text"
              name="detalles"
              placeholder="Detalles de la prenda"
              value={formData.detalles}
              onChange={handleChange}
              className="px-2 rounded-md h-8 shadow-sm"
            />
          </div>
          {/* Agrega este bot√≥n en tu JSX */}
<div className="flex justify-center space-x-4 mt-4">
  <button
    type="button"
    onClick={testBackendConnection}
    className="py-2 px-4 bg-blue-500 text-white rounded-md"
  >
    üîß Probar Conexi√≥n
  </button>
</div>

          <div className="flex justify-center pt-2">
            <button
              type="submit"
              className="mt-2 py-2 px-4 bg-pink-400 text-white rounded-md cursor-pointer hover:bg-pink-200 disabled:opacity-50"
              disabled={loading}
            >
              {loading ? "‚è≥ Subiendo..." : "‚úÖ Agregar Prenda"}
            </button>
          </div>
        </form>
      </div>

      <Footer manejadorMenuA√±adir={manejadorMenuA√±adir} />
    </div>
  );
}

export default FormA√±adirDisponible;